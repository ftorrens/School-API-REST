{
    "openapi": "3.0.0",
    "info": {
        "title": "School API REST Documentation",
        "contact": {
            "email": "ftorrensabeal@gmail.com"
        },
        "version": "1"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login.",
                "operationId": "login",
                "requestBody": {
                    "description": "Login",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "Insert the email",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "Insert the password",
                                        "type": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout.",
                "operationId": "logout",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "user_id"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "User id",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/courses": {
            "get": {
                "tags": [
                    "Courses"
                ],
                "summary": "Get all courses",
                "operationId": "getCourses",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Courses"
                ],
                "summary": "Create a course.",
                "operationId": "insertCourses",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "hours",
                                    "price",
                                    "percent_teacher",
                                    "start_date",
                                    "finish_date"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Insert courses's name",
                                        "type": "string"
                                    },
                                    "hours": {
                                        "description": "Insert courses's hours",
                                        "type": "integer"
                                    },
                                    "price": {
                                        "description": "Insert courses's price",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "percent_teacher": {
                                        "description": "Insert courses's percent teacher",
                                        "type": "number",
                                        "format": "%"
                                    },
                                    "start_date": {
                                        "description": "Insert courses's start date",
                                        "type": "string",
                                        "format": "YYYY-MM-DD"
                                    },
                                    "finish_date": {
                                        "description": "Insert courses's finish date",
                                        "type": "string",
                                        "format": "YYYY-MM-DD"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/courses/{id}": {
            "get": {
                "tags": [
                    "Courses"
                ],
                "summary": "Get an existing course.",
                "operationId": "getCourseById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Courses"
                ],
                "summary": "Update an existing course.",
                "operationId": "updateCourse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the course that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "hours",
                                    "price",
                                    "percent_teacher",
                                    "start_date",
                                    "finish_date"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Insert courses's name",
                                        "type": "string"
                                    },
                                    "hours": {
                                        "description": "Insert courses's hours",
                                        "type": "integer"
                                    },
                                    "price": {
                                        "description": "Insert courses's price",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "percent_teacher": {
                                        "description": "Insert courses's percent teacher",
                                        "type": "number",
                                        "format": "%"
                                    },
                                    "start_date": {
                                        "description": "Insert courses's start date",
                                        "type": "string",
                                        "format": "YYYY-MM-DD"
                                    },
                                    "finish_date": {
                                        "description": "Insert courses's finish date",
                                        "type": "string",
                                        "format": "YYYY-MM-DD"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Courses"
                ],
                "summary": "Delete an existing course.",
                "operationId": "deleteCourse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the course that needs to be delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/courses_student/{id}": {
            "get": {
                "tags": [
                    "Courses"
                ],
                "summary": "Get courses's students.",
                "operationId": "getCourseStudents",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/students": {
            "get": {
                "tags": [
                    "Students"
                ],
                "summary": "Get all students",
                "operationId": "getStudents",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Students"
                ],
                "summary": "Create a student.",
                "operationId": "insertStudents",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "last_name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Insert name of the student",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "Insert last name of the student",
                                        "type": "string"
                                    },
                                    "foto": {
                                        "description": "Insert foto of the student",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/students/{id}": {
            "get": {
                "tags": [
                    "Students"
                ],
                "summary": "Get an existing student.",
                "operationId": "getStudentById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Students"
                ],
                "summary": "Update an existing student.",
                "operationId": "updateStudent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "last_name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the student",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "Updated last name of the student",
                                        "type": "string"
                                    },
                                    "foto": {
                                        "description": "Updated foto of the student",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Students"
                ],
                "summary": "Delete an existing student.",
                "operationId": "deleteStudent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student that needs to be delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/student_courses/{id}": {
            "get": {
                "tags": [
                    "Students"
                ],
                "summary": "Get student's courses.",
                "operationId": "getStudentCourses",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the student",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register a user.",
                "operationId": "register",
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "first_name": {
                                        "description": "Insert the username",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "Insert the last name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Insert the email",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "Insert the password",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get an existing user.",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "first_name": {
                                        "description": "Updated user's name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "Updated user's last name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Updated user's email",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "Updated user's password",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete an existing user.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user that needs to be delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "bearerToken": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerToken": {
                "type": "http",
                "description": "Acess token from authentication",
                "name": "Authorization",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    }
}